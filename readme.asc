image:https://zenodo.org/badge/46426143.svg[link="https://zenodo.org/badge/latestdoi/46426143"]

= Mapping tools for plotting topographic analyses using python

I am very sorry to say that the documentation for these tools are minimal. We have gone through several iterations of design of these tools so there are many useless dead ends in the repository. Sorry about that. The readme below should give you some insights into where to start if you are interested in trying to use these before we actaully release them with documentation. 

== Authors 
* http://www.geos.ed.ac.uk/homes/smudd[Simon M Mudd]
* https://github.com/dvalters?tab=repositories[Declan Valters]
* https://fionaclubb.wordpress.com/[Fiona Clubb]
* http://www.ed.ac.uk/geosciences/people/person.html?indv=5391[Boris Gailleton]
* https://www.gla.ac.uk/schools/ges/staff/martinhurst/[Martin Hurst]
* https://www.qmul.ac.uk/geog/staff/grieves.html[Stuart Grieve]


== General information

These are some plotting tools for working with geospatial data in python. The tools are mostly in the subdirectories in this repository. They are linked packages (in that each subdirectory has an `__init__` file). We have not at this stage created an installer: you simply need to clone this repository and use them from that directory. 

== Installation

At the moment we do not have a functioning `pip` installer. So to run the tools you need to:
. Clone this repository.
. install all the required packages
. Either add the *LSDMappingTools* directory to your [python path] or run the tools within the *LSDMappingTools* directory.

=== Getting the dependencies working the Docker way

https://www.docker.com/[Docker] is a software package that allows you to run containers inside your computer. These containers, in the case of *LSDMappingTools*, have been carefully constructed by the *LSDTopoTools* gnomes to make sure all of the necessary packages are installed. All you need to do is download the container to start working! Easy, right? Well, Docker is a bit of a pain to install on Windows. You will need Windows 10 Enterprise for it to work. On other operating systems it is a breeze. 

To get it to work:

. Install docker
. Download the container from a terminal/powershell window:
+
[source,console]
----
$ docker pull lsdtopotools/lsdtt_viz_docker
----
+
. Run the container
+
[source,console]
----
$ docker run -it -v C:\LSDTopoTools:/LSDTopoTools lsdtopotools/lsdtt_viz_docker
----
+
. Run the setup script by running `sh LSDTT_start.sh`. 

For more details see the https://hub.docker.com/r/lsdtopotools/lsdtt_viz_docker[LSDMappingTools dockerhub page].

=== Getting the dependencies the Conda way

So actually our Docker container uses https://conda.io/miniconda.html[miniconda]. But all the setup is performed before the container is built so you never need to deal with it. You can set up in your own enviroment, however. The instructions are below. We do not recommend this unless there is some reason you cannot install docker. 

==== Setting up python using a conda virtual environment

. Download and install http://conda.pydata.org/miniconda.html[miniconda] on your host machine. 
. Open a command prompt (use the start menu to search for *cmd.exe*)
. Get our https://raw.githubusercontent.com/LSDtopotools/LSDMappingTools/master/conda_environments/environment_docker.yml[environment file]. This is the version that work on our docker container. It is python 3 and based on a 64 bit linux system. It is the most up to date version of the python environment. 
. Create the environment from that file with:
+
[source,console]
----
> conda env create -f environment_docker.yml
----
+
I'm afraid this will take a little while. Actually it will take a very long time. Sorry. 
. Activate the environment:
+
[source,console]
----
> activate LSDTT
----

NOTE: This environment does not include *spyder*, you can install it with `conda install -n LSDTT spyder`

== The sub-packages are:

* *LSDPlottingTools*: A collection of utilities for plotting. The main geospatial plotting routines are in *LSDMapFigure* but there are some older plotting routines, along with a lot of geospatial bells and whistles, within this packages. The other packages don't work without this. 
* *LSDMapArtist*: The first attempt by https://github.com/dvalters?tab=repositories[Declan Valters] to build a https://matplotlib.org/users/artists.html[artist-based] geospatial plotting platform. The _artist_ bit is an attempt to have a interface something like https://matplotlib.org/[matplotlib]. *This has been replaced by LSDMapFigure and is here for educational purposes*. 
* *LSDMapFigure*: This contains objects used for geospatial plotting.
* *LSDChiMappingExamples*: Don't bother with this for now. It is part of some tutorials we are developing bt those aren't complete so you don't need to look in there. 
* *LSDMapWrappers*: These have some simple plotting functions that allow users to make maps with minimal lines of code. 

=== Actually plotting something

We have written some instructions on using the basic functionality of the mapping tools in the *LSDTopoTools* documentation. 
You can get started here:

https://lsdtopotools.github.io/LSDTT_documentation/LSDTT_visualisation.html

=== Code generated documentation

There is some code generated documentation. You can https://lsdmappingtools.readthedocs.io/en/latest/[find it here].

=== Notes

If you are developing this code, you should follow the documentation style explained on the http://sphinxcontrib-napoleon.readthedocs.io/en/latest/example_google.html[readthedocs napolean page].





